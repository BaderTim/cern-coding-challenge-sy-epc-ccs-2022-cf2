
1] You implemented the application using (put a 'x' in the selected box, e.g. "[x] Vue"):
[X] Vue
[ ] JavaScript

2] You chose to implement the application using this technology rather than the other option because:
> Vue is a highly optimized framework that has great support for reactive states. Building something similar with vanilla JavaScript 
> would require a lot of time. Also, I have never used Vue before and wanted to give it a try.

3] How much time did you spend on this challenge?
> 7 hours (so far)

4] What was the most time consuming part of this challenge?
> Researching and understanding Vue and AudioContext since I have never used any of them before.

5] Is the 'Start' button strictly needed? If so, why? If not, would you think it would be better to remove it?
> Short answer: Features like the 'Start' button or something similar are not strictly needed, but highly recommended to guarantee functionality.
> Explanation: Chrome's Autoplay Policy (https://developer.chrome.com/blog/autoplay) comes with a Media Engagement Index, 
> which tries to determine whether or not a user is likely to engage with a media resource. 
> If the Media Engagement Index is below a certain threshold, Chrome will not play the media resource.
> This means that you can never be sure that autoplaying a video or audio will work. 
> Forcing AudioContext to play with JavaScript only works if the user has engaged with the website before.
> In this chapter https://developer.chrome.com/blog/autoplay/#web-audio Chrome also states that 'it is good practice to 
> wait for a user interaction before starting audio playback so that users are aware of something happening. Think of a "play" button 
> or "on/off" switch for instance. You can also add an "unmute" button depending on the flow of the app'. 

6] Do you have any suggestions for improving the visual appeal or the user experience of this application?
> Showing a loading screen while loading the audio data (in case the music.mp3 will be larger / stored on another server in the future)
> Using a dynamic size for the HTML elements to support different screen sizes 
> 
> 

7] (Only if you added more dependencies) For each added dependency, justify why you added it.
> 

8] Do you have anything else to add to help us understand your approach?
> 
> 
> 
